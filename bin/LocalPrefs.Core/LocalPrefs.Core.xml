<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LocalPrefs.Core</name>
    </assembly>
    <members>
        <member name="T:AndanteTribe.IO.CryptoFileAccessor">
            <summary>
            A file accessor that encrypts and decrypts file content using AES encryption.
            Implements the decorator pattern by wrapping another <see cref="T:AndanteTribe.IO.IFileAccessor"/> instance.
            </summary>
        </member>
        <member name="P:AndanteTribe.IO.CryptoFileAccessor.SavePath">
            <inheritdoc />
        </member>
        <member name="M:AndanteTribe.IO.CryptoFileAccessor.#ctor(AndanteTribe.IO.IFileAccessor,System.Byte[])">
            <summary>
            The underlying file accessor that performs actual file operations.
            </summary>
            <param name="fileAccessor">FileAccessor to be decorated with encryption.</param>
            <param name="key">Encryption key used for AES encryption.</param>
        </member>
        <member name="M:AndanteTribe.IO.CryptoFileAccessor.#ctor(AndanteTribe.IO.IFileAccessor,System.Byte[],System.Byte[],System.Security.Cryptography.CipherMode)">
            <summary>
            A file accessor that encrypts and decrypts file content using AES encryption.
            Implements the decorator pattern by wrapping another FileAccessor instance.
            </summary>
            <param name="fileAccessor">The underlying file accessor to be decorated with encryption.</param>
            <param name="key">The encryption key used for AES encryption.</param>
            <param name="iv">The initialization vector used for AES encryption.</param>
            <param name="mode">The cipher mode to use for AES encryption. Defaults to CBC.</param>
        </member>
        <member name="M:AndanteTribe.IO.CryptoFileAccessor.#ctor(System.String@,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:AndanteTribe.IO.CryptoFileAccessor"/> class with a specified file path and encryption key.
            </summary>
            <param name="path">Path to the file where preference data will be stored.</param>
            <param name="key">Encryption key used for AES encryption.</param>
        </member>
        <member name="M:AndanteTribe.IO.CryptoFileAccessor.#ctor(System.String@,System.Byte[],System.Byte[],System.Security.Cryptography.CipherMode)">
            <summary>
            Initializes a new instance of the <see cref="T:AndanteTribe.IO.CryptoFileAccessor"/> class with a specified file path.
            </summary>
            <param name="path">Path to the file where preference data will be stored.</param>
            <param name="key">Encryption key used for AES encryption.</param>
            <param name="iv">Initialization vector used for AES encryption.</param>
            <param name="mode">Cipher mode to use for AES encryption. Defaults to CBC.</param>
        </member>
        <member name="M:AndanteTribe.IO.CryptoFileAccessor.ReadAllBytes">
            <inheritdoc />
        </member>
        <member name="M:AndanteTribe.IO.CryptoFileAccessor.WriteAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AndanteTribe.IO.CryptoFileAccessor.DeleteAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AndanteTribe.IO.CryptoFileAccessor.CreateAes">
            <summary>
            Creates an AES algorithm instance with the provided key, IV, and cipher mode.
            </summary>
            <returns>A configured AES algorithm instance.</returns>
        </member>
        <member name="T:AndanteTribe.IO.IFileAccessor">
            <summary>
            Interface that provides access to the file system.
            Abstracts file read/write operations for local preferences.
            </summary>
        </member>
        <member name="P:AndanteTribe.IO.IFileAccessor.SavePath">
            <summary>
            The file path where preference data will be stored.
            </summary>
        </member>
        <member name="M:AndanteTribe.IO.IFileAccessor.ReadAllBytes">
            <summary>
            Reads the entire file into a byte array.
            </summary>
            <returns>A byte array containing the file's contents.</returns>
        </member>
        <member name="M:AndanteTribe.IO.IFileAccessor.WriteAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Writes a byte array to the file asynchronously.
            </summary>
            <param name="bytes">Bytes to write to the file.</param>
            <param name="cancellationToken"> A token to cancel the asynchronous operation.</param>
        </member>
        <member name="M:AndanteTribe.IO.IFileAccessor.DeleteAsync(System.Threading.CancellationToken)">
            <summary>
            Deletes a file asynchronously.
            </summary>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task that represents the asynchronous delete operation.</returns>
        </member>
        <member name="M:AndanteTribe.IO.IFileAccessor.Create(System.String@)">
            <summary>
            Creates a default <see cref="!:FileAccessor"/> for the specified path.
            </summary>
            <param name="path">Path to the file where preference data will be stored.</param>
            <returns>An instance of <see cref="T:AndanteTribe.IO.IFileAccessor"/> that uses the default file system operations.</returns>
        </member>
        <member name="T:AndanteTribe.IO.IFileAccessor.DefaultFileAccessor">
            <summary>
            Default implementation of the IFileAccessor interface.
            Provides standard file system operations using <see cref="N:System.IO"/>.
            </summary>
            <param name="path">The file path where preference data will be stored. The file will be created if it doesn't exist.</param>
        </member>
        <member name="M:AndanteTribe.IO.IFileAccessor.DefaultFileAccessor.#ctor(System.String@)">
            <summary>
            Default implementation of the IFileAccessor interface.
            Provides standard file system operations using <see cref="N:System.IO"/>.
            </summary>
            <param name="path">The file path where preference data will be stored. The file will be created if it doesn't exist.</param>
        </member>
        <member name="P:AndanteTribe.IO.IFileAccessor.DefaultFileAccessor.SavePath">
            <inheritdoc />
        </member>
        <member name="M:AndanteTribe.IO.IFileAccessor.DefaultFileAccessor.ReadAllBytes">
            <inheritdoc />
        </member>
        <member name="M:AndanteTribe.IO.IFileAccessor.DefaultFileAccessor.WriteAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AndanteTribe.IO.IFileAccessor.DefaultFileAccessor.DeleteAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:AndanteTribe.IO.ILocalPrefs">
            <summary>
            Interface for managing local preferences/settings storage.
            Provides methods to load, save, and delete local data.
            </summary>
        </member>
        <member name="M:AndanteTribe.IO.ILocalPrefs.Load``1(System.String)">
            <summary>
            Loads a value of the specified type from local storage.
            </summary>
            <typeparam name="T">The type of data to load.</typeparam>
            <param name="key">The unique identifier for the stored data.</param>
            <returns>The loaded value, or default value if not found.</returns>
        </member>
        <member name="M:AndanteTribe.IO.ILocalPrefs.SaveAsync``1(System.String,``0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously saves a value to local storage.
            </summary>
            <typeparam name="T">The type of data to save.</typeparam>
            <param name="key">The unique identifier for storing the data.</param>
            <param name="value">The value to save.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task that represents the asynchronous save operation.</returns>
        </member>
        <member name="M:AndanteTribe.IO.ILocalPrefs.DeleteAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously deletes data with the specified key from local storage.
            </summary>
            <param name="key">The unique identifier of the data to delete.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task that represents the asynchronous delete operation.</returns>
        </member>
        <member name="M:AndanteTribe.IO.ILocalPrefs.DeleteAllAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously deletes all stored local data.
            </summary>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task that represents the asynchronous delete all operation.</returns>
        </member>
        <member name="M:AndanteTribe.IO.ILocalPrefs.HasKey(System.String)">
            <summary>
            Determines whether data exists for the specified key.
            </summary>
            <param name="key">The key to check for existence.</param>
            <returns><c>true</c> if data exists for the specified key; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:AndanteTribe.IO.LocalPrefs">
            <summary>
            Provides access to the shared instance of <see cref="T:AndanteTribe.IO.ILocalPrefs"/>.
            </summary>
        </member>
        <member name="P:AndanteTribe.IO.LocalPrefs.Shared">
            <summary>
            Shared instance of <see cref="T:AndanteTribe.IO.ILocalPrefs"/>.
            </summary>
        </member>
    </members>
</doc>
